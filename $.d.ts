export default jQuery;
declare class jQuery {
}
declare namespace jQuery {
    namespace fn {
        export { jQuery as constructor };
        export const length: number;
        export function contains(obj: any): boolean;
        export function findVisible(selector: any): any;
        export function formatParams(params: any): string;
        export function ajax(request: any): void;
        export function prevAll(): any;
        export function index(elem: any): any;
        export function isVisible(): boolean;
        export function toArray(): any;
        export function get(num: any): any;
        export function pushStack(elems: any): any;
        export function wrapAll(html: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function wrapInner(wrapper: any): void;
        export function wrap(html: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function unwrap(): any;
        export function grep(elems: any, callback: any, invert: any): any[];
        export function map(callback: any): any;
        export function slice(...args: any[]): any;
        export function each(fn: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function first(): any;
        export function last(): any;
        export function eq(i: any): any;
        export function empty(): void;
        export function contents(): any;
        export function attr(name: any, val: any): any;
        export function removeAttr(name: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function hide(): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function show(): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function focus(): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function blur(): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function data(name: any, val: any): any;
        export function removeData(name: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function getCorrectStyleName(name: any): any;
        export function css(name: any, val: any): any;
        export function toggleClass(name: any, val: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function addClass(name: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function removeClass(name: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function getClass(elem: any): any;
        export function stripAndCollapse(value: any): any;
        export function hasClass(selector: any): boolean;
        export function scrollTop(val: any): any;
        export function scrollLeft(val: any): any;
        export function on(eventName: any, selector: any, fn: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function off(eventName: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function trigger(type: any): void;
        export function triggerHandler(): void;
        export function val(new_val: any): any;
        export function siblings(): any;
        export function find(selector: any): any;
        export function children(): any;
        export function not(selector: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function add(ary: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function closest(selector: any): any;
        export function html(str: any): any;
        export function text(content: any): any;
        export function after(content: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function clone(deep: any): any;
        export function replaceWith(content: any): void;
        export function insertBefore(el: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function before(content: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function append(content: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function prepend(content: any): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function remove(): {
            constructor: typeof jQuery;
            length: number;
            contains: (obj: any) => boolean;
            findVisible: (selector: any) => any;
            formatParams: (params: any) => string;
            ajax: (request: any) => void;
            prevAll: () => any;
            index: (elem: any) => any;
            isVisible: () => boolean;
            toArray: () => any;
            get: (num: any) => any;
            pushStack: (elems: any) => any;
            wrapAll: (html: any) => any;
            wrapInner: (wrapper: any) => void;
            wrap: (html: any) => any;
            unwrap: () => any;
            grep: (elems: any, callback: any, invert: any) => any[];
            map: (callback: any) => any;
            slice: (...args: any[]) => any;
            each: (fn: any) => any;
            first: () => any;
            last: () => any;
            eq: (i: any) => any;
            empty: () => void;
            contents: () => any;
            attr: (name: any, val: any) => any;
            removeAttr: (name: any) => any;
            hide: () => any;
            show: () => any;
            focus: () => any;
            blur: () => any;
            data: (name: any, val: any) => any;
            removeData: (name: any) => any;
            getCorrectStyleName: (name: any) => any;
            css: (name: any, val: any) => any;
            toggleClass: (name: any, val: any) => any;
            addClass: (name: any) => any;
            removeClass: (name: any) => any;
            getClass: (elem: any) => any;
            stripAndCollapse: (value: any) => any;
            hasClass: (selector: any) => boolean;
            scrollTop: (val: any) => any;
            scrollLeft: (val: any) => any;
            on: (eventName: any, selector: any, fn: any) => any;
            off: (eventName: any) => any;
            trigger: (type: any) => void;
            triggerHandler: () => void;
            val: (new_val: any) => any;
            siblings: () => any;
            find: (selector: any) => any;
            children: () => any;
            not: (selector: any) => any;
            add: (ary: any) => any;
            closest: (selector: any) => any;
            html: (str: any) => any;
            text: (content: any) => any;
            after: (content: any) => any;
            clone: (deep: any) => any;
            replaceWith: (content: any) => void;
            insertBefore: (el: any) => any;
            before: (content: any) => any;
            append: (content: any) => any;
            prepend: (content: any) => any;
            remove: () => any;
            prev: () => any;
            next: () => any;
            nextAllVisible: () => any;
            prevAllVisible: () => any;
            outerHeight: (margin: any) => any;
            outerWidth: (margin: any) => any;
            width: (newWidth: any) => any;
            height: (newHeight: any) => any;
            is: (el: any) => any;
            parent: () => any;
            _matches: (el: any, selector: any) => any;
            parents: (selector: any) => any;
            parentsUntil: (until: any, selector: any) => any;
            insertAfter: (elem: any) => void;
            filter: (fn: any) => any;
            offset: () => {
                top: any;
                left: any;
            };
            position: () => {
                left: any;
                top: any;
            };
            push: (...items: undefined[]) => number;
            splice: {
                (start: number, deleteCount?: number): undefined[];
                (start: number, deleteCount: number, ...items: undefined[]): undefined[];
            };
        };
        export function prev(): any;
        export function next(): any;
        export function nextAllVisible(): any;
        export function prevAllVisible(): any;
        export function outerHeight(margin: any): any;
        export function outerWidth(margin: any): any;
        export function width(newWidth: any): any;
        export function height(newHeight: any): any;
        export function is(el: any): any;
        export function parent(): any;
        export function _matches(el: any, selector: any): any;
        export function parents(selector: any): any;
        export function parentsUntil(until: any, selector: any): any;
        export function insertAfter(elem: any): void;
        export function filter(fn: any): any;
        export function offset(): {
            top: any;
            left: any;
        };
        export function position(): {
            left: any;
            top: any;
        };
        export const push: (...items: undefined[]) => number;
        export const splice: {
            (start: number, deleteCount?: number): undefined[];
            (start: number, deleteCount: number, ...items: undefined[]): undefined[];
        };
    }
    function extend(new_obj: any, ...args: any[]): any;
    function merge(first: any, second: any): any;
    function map(elems: any, callback: any, arg: any): any;
}
